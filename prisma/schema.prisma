// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Address {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Address Information
  label       String?  // e.g., "Home", "Work", "Apartment"
  address     String
  city        String
  state       String
  zipCode     String
  latitude    Float?   // For geocoding
  longitude   Float?   // For geocoding
  
  // Address-specific settings
  isDefault   Boolean  @default(false) // Primary address for this user
  isActive    Boolean  @default(true)  // Whether this address is currently active
  
  // Relations
  items       Item[]   // Items associated with this address
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Item {
  id          String     @id @default(cuid())
  title       String
  description String?
  images      String[]   // Array of image URLs
  category    String?
  status      ItemStatus @default(AVAILABLE)
  userId      String
  addressId   String?
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  address     Address?   @relation(fields: [addressId], references: [id], onDelete: SetNull)
  interests   ItemInterest[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model ItemInterest {
  id         String   @id @default(cuid())
  itemId     String
  userId     String
  timestamp  DateTime @default(now())
  selected   Boolean  @default(false)
  userStats  Json     // Store user stats as JSON
  item       Item     @relation(fields: [itemId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([itemId, userId])
}

enum ItemStatus {
  AVAILABLE
  PENDING
  TAKEN
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  items         Item[]
  interests     ItemInterest[]
  addresses     Address[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
